// Decompiled with JetBrains decompiler
// Type: Txrbo_s_Basic_Crackme_1.CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME
// Assembly: "Txrbo's Basic Crackme 1", Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27FADED5-60D3-4FCE-889F-17D312E55348
// Assembly location: Txrbo's Basic Crackme 1.dll inside D:\Dokumentumok\txrbos-basic-crackme1\Txrbo's Basic Crackme 1.exe)

using System;
using System.Text;

#nullable enable
namespace Txrbo_s_Basic_Crackme_1
{
  internal class CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME
  {
    private static byte[] CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME = new byte[30]
    {
      (byte) 55,
      (byte) 42,
      (byte) 51,
      (byte) 33,
      (byte) 36,
      (byte) 106,
      (byte) 54,
      (byte) 99,
      (byte) 48,
      (byte) 32,
      (byte) 48,
      (byte) 34,
      (byte) 46,
      (byte) 101,
      (byte) 32,
      (byte) 32,
      (byte) 32,
      (byte) 32,
      (byte) 32,
      (byte) 32,
      (byte) 32,
      (byte) 99,
      (byte) 36,
      (byte) 112,
      (byte) 109,
      (byte) 123,
      (byte) 99,
      (byte) 117,
      (byte) 109,
      (byte) 98
    };
    private static byte[] CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME = new byte[27]
    {
      (byte) 19,
      (byte) 62,
      (byte) 36,
      (byte) 34,
      (byte) 56,
      (byte) 40,
      (byte) 101,
      (byte) 42,
      (byte) 60,
      (byte) 49,
      (byte) 54,
      (byte) 63,
      (byte) 109,
      (byte) 49,
      (byte) 43,
      (byte) 55,
      (byte) 97,
      (byte) 51,
      (byte) 42,
      (byte) 62,
      (byte) 54,
      (byte) 52,
      (byte) 61,
      (byte) 51,
      (byte) 39,
      (byte) 113,
      (byte) 109
    };
    private static byte[] CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME = new byte[13]
    {
      (byte) 4,
      (byte) 55,
      (byte) 53,
      (byte) 0,
      (byte) 57,
      (byte) 44,
      (byte) 38,
      (byte) 40,
      (byte) 55,
      (byte) 37,
      (byte) 15,
      (byte) 36,
      (byte) 33
    };
    private static byte[] CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME = new byte[32]
    {
      (byte) 13,
      (byte) 61,
      (byte) 49,
      (byte) 38,
      (byte) 103,
      (byte) 109,
      (byte) 49,
      (byte) 43,
      (byte) 51,
      (byte) 53,
      (byte) 100,
      (byte) 56,
      (byte) 109,
      (byte) 43,
      (byte) 44,
      (byte) 38,
      (byte) 97,
      (byte) 55,
      (byte) 35,
      (byte) 40,
      (byte) 101,
      (byte) 51,
      (byte) 51,
      (byte) 50,
      (byte) 48,
      (byte) 60,
      (byte) 34,
      (byte) 55,
      (byte) 39,
      (byte) 124,
      (byte) 111,
      (byte) 109
    };
    private static byte[] CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME = new byte[25]
    {
      (byte) 26,
      (byte) 55,
      (byte) 49,
      (byte) 111,
      (byte) 107,
      (byte) 57,
      (byte) 45,
      (byte) 34,
      (byte) 38,
      (byte) 102,
      (byte) 48,
      (byte) 107,
      (byte) 36,
      (byte) 49,
      (byte) 109,
      (byte) 114,
      (byte) 6,
      (byte) 44,
      (byte) 36,
      (byte) 41,
      (byte) 101,
      (byte) 41,
      (byte) 61,
      (byte) 35,
      (byte) 109
    };

    private static void Main(string[] args)
    {
      CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKMECRACKME(CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME);
      while (true)
      {
        CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKMECRACKME(CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME);
        if (!CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME(CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME()))
          CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKMECRACKME(CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME);
        else
          break;
      }
      CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKMECRACKME(CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME);
      CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME();
    }

    private static void CRACKMECRACKMECRACKMECRACKMECRACKME(
      byte[] CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME)
    {
      byte[] CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME = new byte[CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.Length];
      byte[] bytes = Encoding.ASCII.GetBytes(CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKME());
      for (int index = 0; index < CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.Length; ++index)
        CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME[index] = (byte) ((uint) CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME[index] ^ (uint) bytes[index % bytes.Length]);
      CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKME(CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME);
    }

    private static void CRACKMECRACKMECRACKME(byte[] CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME)
    {
      byte[] numArray = new byte[CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.Length];
      for (int index = 0; index < CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.Length; ++index)
        numArray[index] = CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME[CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.Length - 1 - index];
      byte[] CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME1 = new byte[numArray.Length];
      for (int index = 0; index < CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.Length; ++index)
        CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME1[index] = CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME[index];
      CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKME(CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME1);
    }

    private static void CRACKMECRACKMECRACKMECRACKME(
      byte[] CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME)
    {
      Console.WriteLine(Encoding.UTF8.GetString(CRACKMECRACKMECRACKMECRACKMECRACKMECRACKME));
    }

    private static string CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME()
    {
      return Console.ReadLine() ?? "";
    }

    private static bool CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME(
      string CRACKMECRACKMECRACKME)
    {
      return
    }

    private static bool CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME(
      string CRACKMECRACKMECRACKME)
    {
      return CRACKMECRACKMECRACKME.Length >= 8 && CRACKMECRACKMECRACKME.Length <= 16;
    }

    private static bool CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME(
      string CRACKMECRACKMECRACKME)
    {
      foreach (char ch in CRACKMECRACKMECRACKME)
      {
        if (char.IsUpper(ch))
          return true;
      }
      return false;
    }

    private static bool
      string CRACKMECRACKMECRACKME)
    {
      foreach (char ch in CRACKMECRACKMECRACKME)
      {
        if (char.IsLower(ch))
          return true;
      }
      return false;
    }

    private static class CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME
    {
      private static string JUNK = "Hey how you're doing";
      private static string JUNKJUNK = "I hope you're doing fine :3";
      private static string JUNKJUNKJUNK = "I hope you're not getting bored";
      private static string JUNKJUNKJUNKJUNK = "Looking for something?";
      private static string JUNKJUNKJUNKJUNKJUNK = "There's nothing here";
      private static string JUNKJUNKJUNKJUNKJUNKJUNK = "Nothing useful at least...";
      private static string JUNKJUNKJUNKJUNKJUNKJUNKJUNK = "Just some junk code to confuse you";
      private static string JUNKJUNKJUNKJUNKJUNKJUNKJUNKJUNK = "Hopefully you can crack this program :P";
      private static string JUNKJUNKJUNKJUNKJUNKJUNKJUNKJUNKJUNK = "Okay i'll stop writting messages, I'm running out of ideas...";

      public static string CRACKMECRACKMECRACKMECRACKME()
      {
        byte[] numArray = new byte[2]
        {
          (byte) 109,
          (byte) 101
        };
        return (CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.CRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKMECRACKME.JUNKJUNKJUNKJUNKJUNKJUNKJUNKJUNK.Substring(18, 5) + Encoding.UTF8.GetString(numArray)).ToUpper();
      }
    }
  }
}
